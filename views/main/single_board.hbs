<link href="https://fonts.googleapis.com/css?family=Quicksand" rel="stylesheet">
<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
{{> navbar}}

<!---------------------------------Vue Code-------------------------------->
 <div class="container">
        <div class="row">
                <div class="col-md-4">
<main id="todolist">
    <h1>
        Todo List 
        <span>Get things done, one item at a time.</span>
    </h1>

    <template v-if="todo.length">
        <transition-group name="todolist" tag="ul">
            <li v-for="item in todoByStatus" v-bind:class="item.done ? 'done' : ''" v-bind:key="item.id">
                <span class="label">\{{item.label}}</span>
                <div class="actions">
                    <button class="btn-picto" type="button" v-on:click="markAsDoneOrUndone(item)" v-bind:aria-label="item.done ? 'Undone' : 'Done'"
                        v-bi/nd:title="item.done ? 'Undone' : 'Done'">
                        <i aria-hidden="true" class="material-icons">\{{ item.done ? 'check_box' : 'check_box_outline_blank' }}</i>
                    </button>
                    <button class="btn-picto" type="button" v-on:click="deleteItemFromList(item)" aria-label="Delete" title="Delete">
                        <i aria-hidden="true" class="material-icons">delete</i>
                    </button>
                </div>
            </li>
        </transition-group>
        <togglebutton label="Move done items at the end?" name="todosort" v-on:clicked="clickontoogle" />
    </template>
    <p v-else class="emptylist">Your todo list is empty.</p>

    <form name="newform" v-on:submit.prevent="addItem">
        <label for="newitem">Add to the todo list</label>
        <input type="text" name="newitem" id="newitem" v-model="newitem">
        <button type="submit">Add item</button>
    </form>
</main>
</div>



    <div class="col-md-8 chat"  id="app">
       
       
        <div class="row">
            <div class="col-md-4 chat_left">
               <h3><i class="fa fa-users fa-lg" aria-hidden="true"></i>&nbsp;People</h3>
               <hr>
               <p>&nbsp;Online</p>
               <ul class="list-group">
                  
                  <li class="list-group-item list-group-item-success"><strong>\{{currentUser}}</strong></li>

                </ul>
                
            </div>
            <div class="col-md-8 chat_right">
               <div class="row">
                   <div class="col-md-12 right_inside">
                        <div class="chat" >
                            <div class="chat-history">
                        
                                <h1>
                                    <i class="fa fa-comments fa-lg"></i> Chat Room</h1>
                                <br>
                                <hr>
                                <br>
                                
                                <ul class="chat-ul">
                        
                                    <div v-for="m in messages">
                        
                                        <li v-if="m.by === currentUser">
                                            <h3>
                                                <i class="fa fa-circle"></i> \{{ m.by }}</h3>
                                            <p> \{{ m.text }} </p>
                                            <div class="gray"> \{{humanReadable(m.when) }} </div>
                                        </li>
                        
                                        <li v-else>
                                            <h3> \{{ m.by }}
                                                <i class="fa fa-circle fa-2x"></i>
                                            </h3>
                                            <p> \{{ m.text }} </p>
                                            <span class="gray pull-right"> \{{humanReadable(m.when) }} </span>
                                        </li>
                        
                                        <br>
                                    </div>
                        
                                </ul>
                        
                            </div>
                            <!-- end chat-history -->
    
                        </div>

                   </div>
               </div> 
               
               <div class="row message"  id="send">
                   <div class="col-md-8 margin_padding_zero">
                       <input  autofocus id="msg" v-model="msg" autocomplete="off" class="form-control" placeholder="Chat here..." style="color:#FFF">
                   </div>
                   <div class="col-md-4 margin_padding_zero">
                       <button class="btn btn-success btn-md btn-block" v-on:click="send">
                            <i class="fa fa-send fa-lg"></i> Send
                       </button>
                   </div>
               </div> 
            </div>
        </div>
        
        
        
        
            </div>
        </div>    
    </div>

    <!-- socketio -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.0.3/socket.io.slim.js"></script>

<!-- momentjs lib -->
<script src="https://cdn.jsdelivr.net/npm/moment@2.18.1/moment.min.js"></script>
<script src="js/master.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.3.4/vue.min.js"></script>
<script>
    Vue.component('togglebutton', {
            props: ['label', 'name'],
            template: `<div class="togglebutton-wrapper" v-bind:class="isactive ? 'togglebutton-checked' : ''">
      <label v-bind:for="name">
        <span class="togglebutton-label">{{ label }}</span>
        <span class="tooglebutton-box"></span>
      </label>
      <input v-bind:id="name" type="checkbox" v-bind:name="name" v-model="isactive" v-on:change="onToogle">
  </div>`,
            model: {
                prop: 'checked',
                event: 'change'
            },
            data: function () {
                return {
                    isactive: false
                }
            },
            methods: {
                onToogle: function () {
                    this.$emit('clicked', this.isactive)
                }
            }
        });

        var todolist = new Vue({
            el: '#todolist',
            data: {
                newitem: '',
                sortByStatus: false,
                todo: [
                    { id: 1, label: "Learn VueJs", done: true },
                    { id: 2, label: "Code a todo list", done: false },
                    { id: 3, label: "Learn something else", done: false }
                ]
            },
            methods: {
                addItem: function () {
                    this.todo.push({ id: Math.floor(Math.random() * 9999) + 10, label: this.newitem, done: false });
                    this.newitem = '';
                },
                markAsDoneOrUndone: function (item) {
                    item.done = !item.done;
                },
                deleteItemFromList: function (item) {
                    let index = this.todo.indexOf(item)
                    this.todo.splice(index, 1);
                },
                clickontoogle: function (active) {
                    this.sortByStatus = active;
                }
            },
            computed: {
                todoByStatus: function () {

                    if (!this.sortByStatus) {
                        return this.todo;
                    }

                    var sortedArray = []
                    var doneArray = this.todo.filter(function (item) { return item.done; });
                    var notDoneArray = this.todo.filter(function (item) { return !item.done; });

                    sortedArray = [...notDoneArray, ...doneArray];
                    return sortedArray;
                }
            }
        });
</script>

<script>
    let socket = io();
    var username = '';

    socket.on('user', function (data) {
        console.log('Client side user data', data.username);
        username = data.username;
        let app = new Vue({
            el: "#app",
            data: {
                currentUser: username,
                msg: "",
                messages: [],
                socket: io()
            },
            created() {

                // init code
                console.log("created");
                // register event listener
                this.socket.on("chatChannel", chat => {
                    console.log("received!");
                    this.messages.push(chat);
                    window.scrollTo(0, document.body.scrollHeight);
                });

                console.log("fetching chats...");
                console.log("Username ", username);
                this.fetchChat();
            },
            methods: {
                /**
                    * On click send button, sends the message to chat room
                    */
                send(event) {
                    let message = this.msg.trim();
                    let by = this.currentUser;

                    if (message.length === 0) return;

                    this.msg = "";
                    console.log("sending");

                    this.socket.emit("chatChannel", {
                        text: message,
                        by: by
                    });
                },

                /**
                    * fetches chat history from REST API
                    */
                fetchChat() {
                    this.$http.get("/history").then(response => {
                        if (response.body.length > 0) {
                            // concatinate the reverse because the server sent the latest few in reverse order
                            this.messages = this.messages.concat(response.body.reverse());
                        }
                    }, err => {
                        console.error(err);
                    });
                },
                humanReadable(date) {
                    return moment(date).fromNow();
                }
            }
        });

    });




</script>

<style>
    * {
	margin:0;
	padding:0;
	box-sizing:border-box;
}

@keyframes strikeitem {
	to { width:calc(100% + 1rem); }
}

#todolist {
	margin:4rem auto;
	padding:2rem 3rem 3rem;
	max-width:500px;
	background: #373f46;
	color:#FFF;
	box-shadow:-20px -20px 0px 0px rgba(100,100,100,.1);
}
#todolist h1 {
    /*text-align:center;*/
    font-weight:normal;
    font-size:2.6rem;
    letter-spacing:0.05em;
    border-bottom:1px solid rgba(255,255,255,.3); 
}
#todolist h1 span {
	display:block;
	font-size:0.8rem;
	margin-bottom:0.7rem;
	margin-left:3px;
	margin-top:0.2rem;   
}

#todolist .emptylist {
	margin-top:2.6rem;
	text-align:center;
	letter-spacing:.05em;
	font-style:italic;
	opacity:0.8;
	
}
#todolist ul {
	margin-top:2.6rem;
	list-style:none;
}
#todolist .todolist-move {
	transition: transform 1s;
}
#todolist li {
	display:flex;
	margin:0 -3rem 4px;
	padding:1.1rem 3rem;
	justify-content:space-between;
	align-items:center;
	background:rgba(255,255,255,0.1);
}

#todolist .actions {
	flex-shrink:0;
	padding-left:0.7em;
}
#todolist .label {
	position:relative;
	transition:opacity .2s linear;
}
#todolist .done .label {
	opacity:.6;
}
#todolist .done .label:before {
	content:'';
	position:absolute;
	top:50%;
	left:-.5rem;
	display:block;
	width:0%;
	height:1px;
	background:#FFF;
	animation:strikeitem .3s ease-out 0s forwards;
}
#todolist .btn-picto {
	border:none;
	background:none;
	-webkit-appearance:none;
	cursor:pointer;
	color:#FFF;
}


/* FORM */
form {
	margin-top:3rem;
	display:flex;
	flex-wrap:wrap;
}
form label {
	min-width:100%;
	margin-bottom:.5rem;
	font-size:1.3rem;
}
form input {
    color:black;
	flex-grow:1;
	border:none;
	background:#f7f1f1;
	padding:0 1.5em;
	font-size:initial;
    color: black;
}
form button {
	padding:0 1.3rem;
	border:none;
	background: #4b5359;
	color:white;
	text-transform:uppercase;
	font-weight:bold;
	border:1px solid rgba(255,255,255,.3);
	margin-left:5px;
	cursor:pointer;
	transition:background .2s ease-out;
}
form button:hover {
	background-color: #4b5359;
}
form input, 
form button {
	font-family:'Quicksand', sans-serif;
	height:3rem;
}


/* TOOGLE COMPONENT */
.togglebutton-wrapper {
	margin-top:1em;
}
.togglebutton-wrapper label {
    display:flex;
    justify-content:flex-end;
    align-items:center;
}
.togglebutton-wrapper input {
	position:absolute;
    left:-9999px;
}
.togglebutton-wrapper .togglebutton-label {
	font-size:.8rem;
	letter-spacing:.1em
}
.togglebutton-wrapper .tooglebutton-box {
	position:relative;
	display:block;
	margin-left:0.6em;
	width:38px;
	height:22px;
	background:white;
	/*border:1px solid black;*/
	border-radius:999px;
	cursor:pointer;
}
.togglebutton-wrapper .tooglebutton-box:before {
	content:'';
	position:absolute;
	top:2px; left:2px;
	display:block;
	width:18px; height:18px;
	/*border:1px solid #FF6666;*/
	border-radius:50%;
	background:#FF6666;
	opacity:0.7;
	transition:	all .2s ease-in-out;
}
.togglebutton-wrapper.togglebutton-focus .tooglebutton-box {
	box-shadow:0px 0px 0px 3px rgba(0,0,0,0.1);
}
.togglebutton-wrapper.togglebutton-checked .tooglebutton-box:before {
	left:calc(100% - 4px - 16px);
	opacity:1;
}

 /*Chat Channel*/

.chat a
{
    color: darkgray;
}
.chat a:hover
{
    color: darkgray;
}
</style>